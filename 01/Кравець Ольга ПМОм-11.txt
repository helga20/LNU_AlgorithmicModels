1. З яких дій складається правило множення двох чисел в стовпчик? Кожна дія має бути елементарною неподільною, записаною в термінах, зрозумілих учневі школи, який вперше вивчає таке правило. В яких ситуаціях множення можна вважати єдиною дією?

Відповідь:
Множення двох чисел в стовпчик складається з таких дій: 
	Множення кожної цифри першого числа на кожну цифру другого в чітко визначеному порядку.
	Множення можна вважати єдиною дією, якщо обидва числа складаються з однієї
	цифри.

****************************************************************************************

2. Перерахуйте послідовність дій, необхідних для рисування бісектриси кута. Аналогічно до першої задачі, кожна дія має бути елементарною неподільною, записаною в термінах геометрії, зрозумілих учневі школи.

Відповідь:
Для рисування бісектриси кута необхідно:
	- виміряти кут;
	- виконати ділення отриманої в першій операції величини на 2;
	- відміряти середину кута за допомогою значення, отриманого в попередній операції;
	- нарисувати бісектрису на середині кута.

****************************************************************************************

3. Запишіть точне означення термінів визначеність алгоритму, результативність алгоритму, формальність алгоритму.

Відповідь:
Алгоритм визначений, якщо він складається з допустимих команд виконавця, які можна виконати для зазначених вхідних даних.
Алгоритм результативний, якщо він дає результати (які можуть виявитися і неправильними).
Алгоритм формальний, якщо його можуть виконати не один, а декілька виконавців з однаковими результатами.

****************************************************************************************

4. Записати алгоритм, за допомогою якого можна обійти будинок довкола. Алгоритм має складатись з таких дій, які можна вважати простими. На яких виконавців розрахований такий алгоритм?

Відповідь:
Щоб обійти будинок довкола, необхідно:
	- почати рух вздовж однієї зі стін;
	- досягнувши кута будинку, виконати поворот в ту ж сторону, що й периметр будівлі;
	- послідовно виконувати попередні операції доки не буде досягнуто точки старту.
Виконавцем цього алгоритму може бути людина, спеціально навчена тварина чи запрограмований пристрій (робот, іграшковий автомобіль і т.д.).

****************************************************************************************

5. Нехай нам необхідно вміти малювати лише такі фігури, показані на малюнку, але різних розмірів. Для кожного з трьох випадків а), б), в) окремо запропонуйте систему команд деякого виконавця, за допомогою яких можна було б записати алгоритм його роботи 
(алгоритм малювання).

Відповідь:
	а) Нехай виконавцем є комп'ютер. Тоді необхідно, аби програма виконання алгоритму малювання уміла: малювати коло, малювати овал, малювати прямокутник, замальовувати фігуру в чорний колір, розрахунок дистанції.
	б) Нехай виконавцем є людина. В такому випадку їй необхідно уміти малювати трикутник й прямокутник, замальовувати фігури зеленим та коричневим кольорами, розрахунок дистанції.
	в) Нехай виконавцем є відповідно запрограмований робот. Серед його команд мають бути: малювання прямокутників різного розміру (також квадратів), малювання кола, розрахунок дистанції.

****************************************************************************************

6. Складіть циклічні операторні схеми для обчислень за наступними формулами.  Операторна схема має складатись з елементарних операцій виду "додати два числа", "помножити два числа", "порівняти два числа", "перейти до кроку N" тощо. Отже кроки (операції) треба нумерувати. Перелік допустимих операцій має бути подібний до операцій мікрокалькулятора

Відповідь:
1)

	1. begin
	2. y := 0
	3. i := 1
	4. while i <= 5 do
	5.     read a[i], b[i]
	6.     p := b[i] * b[i]
	7.     p := p + a[i]
	8.     m := i + 2
	9.     t := p / m
	10.    y := y + t
	11.    i := i + 1
	12. print y
	13. end

2)
	1. begin
	2. y := 0
	3. i := 1
	4. while i <= 11 do
	5.     read a[i], b[i]
	6.     p := a[i] * a[i] * a[i]
	7.     p := p - b[i]
	8.     t := p / i
	9.     y := y + t
	10.    i := i + 1
	11. print y
	12. end

3)
	1. begin
	2. u := 1
	3. k := -3
	4. while k <= 6 do
	5.     read b[k], c[k], f[k]
	6.     p := f[k] * f[k]
	7.     p := p + b[k] - c[k]
	8.     m := 2 * k + 10
	9.     t := p / m
	10.    u := u * t
	11.    k := k + 1
	12. print u
	13. end

4)
	1. begin
	2. z := 1
	3. j := 1
	4. read k
	5. while j <= 15 do
	6.     read a[j], b[j]
	7.     p := a[j] - 2
	8.     p := cos(p) * cos(p)
	9.     m := 2 - sin(b[j]) + k
	10.    t := p / m
	11.    z := z * t
	12.    j := j + 1
	13. print z
	14. end









